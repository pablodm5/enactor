<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<core:process xmlns:core="http://www.enactor.com/core" xmlns:retail="http://www.enactor.com/retail" xmlns:ns4="http://www.enactor.com/crm" xmlns:hta="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803" xmlns:ns6="http://www.apis-it.hr/fin/2012/types/f73" xmlns:ns7="http://www.w3.org/2000/09/xmldsig#" xmlns:ns8="http://www.enactor.com/retail/storedRetailTransaction/service" xmlns:ns9="http://www.fu.gov.si/" xmlns:ns10="http://www.enactor.com/addressLookup/service" xmlns:htd="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/200803" xmlns:htt="http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803" xmlns:sref="http://docs.oasis-open.org/wsbpel/2.0/serviceref" xmlns:ns14="http://www.enactor.com/crm/customerLoyalty/service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <core:processID>ApplicationUpdater/LoadInstallerProperties</core:processID>
    <core:version>1.0</core:version>
    <core:name></core:name>
    <core:defaultMessageBaseName></core:defaultMessageBaseName>
    <core:firstStateID>State</core:firstStateID>
    <core:className></core:className>
    <core:uiHints>
        <entry>
            <key>com.enactor.tools.editor.process.style</key>
            <value>2047</value>
        </entry>
        <entry>
            <key>com.enactor.tools.editor.process.xloc</key>
            <value>8</value>
        </entry>
        <entry>
            <key>com.enactor.tools.editor.process.yloc</key>
            <value>8</value>
        </entry>
    </core:uiHints>
    <core:metaData>
        <core:inputs>
            <core:input name="enactor.core.AdditionalEnvMap">
                <core:interfaceName>java.util.Map</core:interfaceName>
            </core:input>
            <core:input name="enactor.core.AdditionalParameterMap">
                <core:interfaceName>java.util.Map</core:interfaceName>
            </core:input>
            <core:input name="enactor.core.EnvData">
                <core:interfaceName>java.lang.String</core:interfaceName>
            </core:input>
            <core:input name="enactor.core.InstallerArguments">
                <core:interfaceName>java.lang.String</core:interfaceName>
            </core:input>
        </core:inputs>
        <core:outputs>
            <core:output name="enactor.core.EnvData">
                <core:interfaceName>java.lang.String</core:interfaceName>
            </core:output>
            <core:output name="enactor.core.InstallerArguments">
                <core:interfaceName>java.lang.String</core:interfaceName>
            </core:output>
        </core:outputs>
        <stateDataTypes>
            <stateDataType name="enactor.core.EnvData">
                <core:interfaceName>java.lang.String</core:interfaceName>
            </stateDataType>
            <stateDataType name="enactor.core.InstallerArguments">
                <core:interfaceName>java.lang.String</core:interfaceName>
            </stateDataType>
            <stateDataType name="enactor.core.AdditionalParameterMap">
                <core:interfaceName>java.util.Map</core:interfaceName>
            </stateDataType>
            <stateDataType name="enactor.core.AdditionalEnvMap">
                <core:interfaceName>java.util.Map</core:interfaceName>
            </stateDataType>
        </stateDataTypes>
    </core:metaData>
    <core:endProcessAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>Success</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIEndProcessAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>1</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>1776</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>879</value>
            </entry>
        </core:uiHints>
        <core:metaData/>
        <core:typeId>enactor.types.EndProcess</core:typeId>
        <core:outcome>Success</core:outcome>
        <core:defaultProcessId></core:defaultProcessId>
    </core:endProcessAction>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>CreateParameterMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.commonUI.list.processes.CreateEmptyMapAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>346</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>321</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input name="enactor.coreUI.MapType">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:input>
                <core:input name="enactor.coreUI.TimeoutMS">
                    <core:interfaceName>java.lang.Integer</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output name="enactor.coreUI.Map">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.BasicAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>CheckHasAdditionalParamMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>MergeAdditionalParameters</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.commonUI.list.processes.MergeMapsAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>584</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>423</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.coreUI.MapA">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.coreUI.MapB">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
                <core:input name="enactor.coreUI.CreateNew">
                    <core:interfaceName>java.lang.Boolean</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output name="enactor.coreUI.Map">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.BasicAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>PopulateParameterMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>CheckHasAdditionalParamMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UINullAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>1</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>584</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>321</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.NullAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>2</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>MergeAdditionalParameters</core:toActionID>
            <core:condition>notEmpty(process.additionalParameterMap)</core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>PopulateParameterMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>CreateEnvMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.commonUI.list.processes.CreateEmptyMapAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>291</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>909</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input name="enactor.coreUI.MapType">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:input>
                <core:input name="enactor.coreUI.TimeoutMS">
                    <core:interfaceName>java.lang.Integer</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output name="enactor.coreUI.Map">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.BasicAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>CheckHasAdditionalEnvMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>PopulateEnvMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>732</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>909</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.core.EnvMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.core.EnvMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>ParseCompositeUrlEnv</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="envMap[&quot;$deviceId&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$deviceId&quot;], getConfigValue(&quot;Service.DeviceID&quot;, &quot;&quot;), getConfigValue(&quot;Container.DeviceID&quot;, &quot;&quot;), getConfigValue(&quot;JMX.ApplicationID&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$locationId&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$locationId&quot;], getConfigValue(&quot;Service.LocationID&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$backOfficeAppHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$backOfficeAppHost&quot;], getConfigValue(&quot;Server.BO.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$backOfficeAppPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$backOfficeAppPort&quot;], getConfigValue(&quot;Server.BO.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$backOfficeAppSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$backOfficeAppSecurePort&quot;], getConfigValue(&quot;Server.BO.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$backOfficeServHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$backOfficeServHost&quot;], getConfigValue(&quot;Server.BO_WS.Host&quot;,&quot;&quot;), getConfigValue(&quot;Server.BO.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$backOfficeServPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$backOfficeServPort&quot;], getConfigValue(&quot;Server.BO_WS.HttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.BO.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$backOfficeServSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$backOfficeServSecurePort&quot;], getConfigValue(&quot;Server.BO_WS.SecureHttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.BO.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerServHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerServHost&quot;], getConfigValue(&quot;Server.BO_WS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerServPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerServPort&quot;], getConfigValue(&quot;Server.BO_WS.Port&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerServSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerServSecurePort&quot;], getConfigValue(&quot;Server.BO_WS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerAppHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerAppHost&quot;], getConfigValue(&quot;Server.EM.Host&quot;, &quot;&quot;), getConfigValue(&quot;Server.WS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerAppPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerAppPort&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.WS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerAppSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerAppSecurePort&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.WS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerProcHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerProcHost&quot;], getConfigValue(&quot;Server.EM.Host&quot;,&quot;&quot;), getConfigValue(&quot;Broadcast.DefaultDownloadServerHostName&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerProcPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerProcPort&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerProcSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerProcSecurePort&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerServHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerServHost&quot;], getConfigValue(&quot;Server.EM.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerServPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerServPort&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$estateManagerServSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$estateManagerServSecurePort&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth1Host&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth1Host&quot;], getConfigValue(&quot;Server.EFT1.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth1Port&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth1Port&quot;], getConfigValue(&quot;Server.EFT1.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth1SecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth1SecurePort&quot;], getConfigValue(&quot;Server.EFT1.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth1Protocol&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth1Protocol&quot;], getConfigValue(&quot;Server.EFT1.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth2Host&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth2Host&quot;], getConfigValue(&quot;Server.EFT2.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth2Port&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth2Port&quot;], getConfigValue(&quot;Server.EFT2.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth2SecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth2SecurePort&quot;], getConfigValue(&quot;Server.EFT2.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth2Protocol&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth2Protocol&quot;], getConfigValue(&quot;Server.EFT2.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth3Host&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth3Host&quot;], getConfigValue(&quot;Server.EFT3.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth3Port&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth3Port&quot;], getConfigValue(&quot;Server.EFT3.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth3SecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth3SecurePort&quot;], getConfigValue(&quot;Server.EFT3.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth3Protocol&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth3Protocol&quot;], getConfigValue(&quot;Server.EFT3.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth4Host&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth4Host&quot;], getConfigValue(&quot;Server.EFT4.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth4Port&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth4Port&quot;], getConfigValue(&quot;Server.EFT4.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth4SecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth4SecurePort&quot;], getConfigValue(&quot;Server.EFT4.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$cardAuth4Protocol&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$cardAuth4Protocol&quot;], getConfigValue(&quot;Server.EFT4.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$crmHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$crmHost&quot;], getConfigValue(&quot;Server.CRM_WS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$crmPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$crmPort&quot;], getConfigValue(&quot;Server.CRM_WS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$crmSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$crmSecurePort&quot;], getConfigValue(&quot;Server.CRM_WS.SecureHttpPort &quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$inventoryManagerAppHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$inventoryManagerAppHost&quot;], getConfigValue(&quot;Server.IM.Host&quot;, &quot;&quot;), getConfigValue(&quot;Server.IMMS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$inventoryManagerAppPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$inventoryManagerAppPort&quot;], getConfigValue(&quot;Server.IM.HttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.IMMS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$inventoryManagerAppSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$inventoryManagerAppSecurePort&quot;], getConfigValue(&quot;Server.IM.SecureHttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.IMMS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$inventoryManagerServHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$inventoryManagerServHost&quot;], getConfigValue(&quot;Server.IMWS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$inventoryManagerServPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$inventoryManagerServPort&quot;], getConfigValue(&quot;Server.IMWS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$inventoryManagerServSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$inventoryManagerServSecurePort&quot;], getConfigValue(&quot;Server.IMWS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$orderManagerAppHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$orderManagerAppHost&quot;], getConfigValue(&quot;Server.OM.Host&quot;,&quot;&quot;), getConfigValue(&quot;Server.OMMS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$orderManagerAppPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$orderManagerAppPort&quot;], getConfigValue(&quot;Server.OM.HttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.OMMS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$orderManagerAppSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$orderManagerAppSecurePort&quot;], getConfigValue(&quot;Server.OM.SecureHttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.OMMS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$orderManagerServHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$orderManagerServHost&quot;], getConfigValue(&quot;Server.OMWS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$orderManagerServPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$orderManagerServPort&quot;], getConfigValue(&quot;Server.OMWS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$orderManagerServSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$orderManagerServSecurePort&quot;], getConfigValue(&quot;Server.OMWS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$reportsHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$reportsHost&quot;], getConfigValue(&quot;Server.EMREPORT.Host&quot;, &quot;&quot;), getConfigValue(&quot;Server.Reports.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$reportsPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$reportsPort&quot;], getConfigValue(&quot;Server.EMREPORT.HttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.Reports.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$reportsSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$reportsSecurePort&quot;], getConfigValue(&quot;Server.EMREPORT.SecureHttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.Reports.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$solrHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$solrHost&quot;], getConfigValue(&quot;Common.SolrUrl&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$solrPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$solrPort&quot;], getConfigValue(&quot;Common.SolrUrl&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$rmiPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$rmiPort&quot;], getConfigValue(&quot;RMI.ServerPort&quot;,&quot;&quot;), getConfigValue(&quot;JMX.ManagementNodePort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$databaseIdentifier&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$databaseIdentifier&quot;], getConfigValue(&quot;QueryTranslator.DatabaseIdentifier&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$databaseDriver&quot;]" fromExpression="envMap[&quot;$databaseDriver&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$databaseUrl&quot;]" fromExpression="envMap[&quot;$databaseUrl&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$databaseUsername&quot;]" fromExpression="envMap[&quot;$databaseUsername&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$databasePassword&quot;]" fromExpression="envMap[&quot;$databasePassword&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$databaseSchema&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$databaseSchema&quot;], getConfigValue(&quot;Common.DatabaseSchema&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$keystorePassword&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$keystorePassword&quot;], getConfigValue(&quot;Keystore.Password&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$axis2Username&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$axis2Username&quot;], getConfigValue(&quot;axis2.user&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$axis2Password&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$axis2Password&quot;], getConfigValue(&quot;axis2.password&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$taskUsername&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$taskUsername&quot;], getConfigValue(&quot;Task.SystemUser&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$taskPassword&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$taskPassword&quot;], getConfigValue(&quot;Task.SystemPassword&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$systemUsername&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$systemUsername&quot;], getConfigValue(&quot;System.User&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$systemPassword&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$systemPassword&quot;], getConfigValue(&quot;System.Password&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$parentProcessSet&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$parentProcessSet&quot;], getConfigValue(&quot;Common.ParentProcessSet&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$processSet&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$processSet&quot;], getConfigValue(&quot;Common.ProcessSet&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$processConnectionDefinition&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$processConnectionDefinition&quot;], getConfigValue(&quot;ProcessConnections.DefinitionId&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$localPort&quot;]" fromExpression="envMap[&quot;$localPort&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$localSecurePort&quot;]" fromExpression="envMap[&quot;$localSecurePort&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$serviceUsername&quot;]" fromExpression="envMap[&quot;$serviceUsername&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$servicePassword&quot;]" fromExpression="envMap[&quot;$servicePassword&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$moduleCustomerCollections&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$moduleCustomerCollections&quot;], getConfigValue(&quot;Modules.CustomerCollectionsModule&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$moduleCrm&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$moduleCrm&quot;], getConfigValue(&quot;Modules.CRMModule&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$moduleInventory&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$moduleInventory&quot;], getConfigValue(&quot;Modules.InventoryModule&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$moduleOrder&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$moduleOrder&quot;], getConfigValue(&quot;Modules.OrderModule&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$moduleRepair&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$moduleRepair&quot;], getConfigValue(&quot;Modules.RepairModule&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$moduleTimeAttendance&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$moduleTimeAttendance&quot;], getConfigValue(&quot;Modules.TimeAttendanceModule&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerAccountHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerAccountHost&quot;], getConfigValue(&quot;Server.EM.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerAccountPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerAccountPort&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerAccountSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerAccountSecurePort&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerSearchHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerSearchHost&quot;], getConfigValue(&quot;Server.EM.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerSearchPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerSearchPort&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$customerSearchSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$customerSearchSecurePort&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$settlementHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$settlementHost&quot;], getConfigValue(&quot;Server.SH.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$settlementPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$settlementPort&quot;], getConfigValue(&quot;Server.SH.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$settlementSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$settlementSecurePort&quot;], getConfigValue(&quot;Server.SH.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$installDatabase&quot;]" fromExpression="envMap[&quot;$installDatabase&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$jdkLocation&quot;]" fromExpression="envMap[&quot;$jdkLocation&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$defaultJdkPath&quot;]" fromExpression="envMap[&quot;$defaultJdkPath&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$restaurantLocalStatusStore&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$restaurantLocalStatusStore&quot;], getConfigValue(&quot;Restaurant.LocalStatusStore&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$restaurantServHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$restaurantServHost&quot;], getConfigValue(&quot;RestaurantServer.WS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$restaurantServPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$restaurantServPort&quot;], getConfigValue(&quot;RestaurantServer.WS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$restaurantServSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$restaurantServSecurePort&quot;], getConfigValue(&quot;RestaurantServer.WS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$restaurantServRmiPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$restaurantServRmiPort&quot;], getConfigValue(&quot;RestaurantServer.WS.RMIPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$localJvmMs&quot;]" fromExpression="envMap[&quot;$localJvmMs&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$localJvmMx&quot;]" fromExpression="envMap[&quot;$localJvmMx&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$bumpBarHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$bumpBarHost&quot;], getConfigValue(&quot;BumpBar.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$bumpBarPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$bumpBarPort&quot;], getConfigValue(&quot;BumpBar.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$bumpBarSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$bumpBarSecurePort&quot;], getConfigValue(&quot;BumpBar.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$selfServiceCustomerUser&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$selfServiceCustomerUser&quot;], getConfigValue(&quot;SelfService.CustomerUser&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$applicationUrl&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$applicationUrl&quot;], getConfigValue(&quot;applicationUrl&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$localTheme&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$localTheme&quot;], getConfigValue(&quot;localTheme&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$parentTheme&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$parentTheme&quot;], getConfigValue(&quot;parentTheme&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$theme&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$theme&quot;], getConfigValue(&quot;theme&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverProcessId&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverProcessId&quot;], getConfigValue(&quot;serverProcessId&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$enactorXmlLocation&quot;]" fromExpression="envMap[&quot;$enactorXmlLocation&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$enactorClientXmlLocation&quot;]" fromExpression="envMap[&quot;$enactorClientXmlLocation&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$jreLocation&quot;]" fromExpression="envMap[&quot;$jreLocation&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$deviceType&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$deviceType&quot;], getConfigValue(&quot;Service.DeviceType&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$envTest&quot;]" fromExpression="envMap[&quot;$envTest&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$keystorePath&quot;]" fromExpression="envMap[&quot;$keystorePath&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$datasourceParameters&quot;]" fromExpression="envMap[&quot;$datasourceParameters&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$localJvmMaxPermSize&quot;]" fromExpression="envMap[&quot;$localJvmMaxPermSize&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$installerIniLocation&quot;]" fromExpression="envMap[&quot;$installerIniLocation&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverTMSUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverTMSUrlBase&quot;], getConfigValue(&quot;Server.TMS.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverBPUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverBPUrlBase&quot;], getConfigValue(&quot;Server.BP.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverOMProcUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverOMProcUrlBase&quot;], getConfigValue(&quot;Server.OMProc.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverIMProcUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverIMProcUrlBase&quot;], getConfigValue(&quot;Server.IMProc.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverEMProcUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverEMProcUrlBase&quot;], getConfigValue(&quot;Server.EMProc.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverEMWSUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverEMWSUrlBase&quot;], getConfigValue(&quot;Server.EMWS.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverBOWSUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverBOWSUrlBase&quot;], getConfigValue(&quot;Server.BOWS.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverCardAuth1UrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverCardAuth1UrlBase&quot;], getConfigValue(&quot;Server.CardAuth1.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverCardAuth2UrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverCardAuth2UrlBase&quot;], getConfigValue(&quot;Server.CardAuth2.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverCardAuth3UrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverCardAuth3UrlBase&quot;], getConfigValue(&quot;Server.CardAuth3.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverCardAuth4UrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverCardAuth4UrlBase&quot;], getConfigValue(&quot;Server.CardAuth4.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverEMAppUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverEMAppUrlBase&quot;], getConfigValue(&quot;Server.EMApp.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverHMUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverHMUrlBase&quot;], getConfigValue(&quot; Server.HM.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverHMRMIUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverHMRMIUrlBase&quot;], getConfigValue(&quot;Server.HMRMI.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverHMConsumerUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverHMConsumerUrlBase&quot;], getConfigValue(&quot;Server.HMConsumer.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverHMKitchenDisplayUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverHMKitchenDisplayUrlBase&quot;], getConfigValue(&quot;Server.HMKitchenDisplay.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverCMAppUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverCMAppUrlBase&quot;], getConfigValue(&quot;Server.CMApp.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverCMWSUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverCMWSUrlBase&quot;], getConfigValue(&quot;Server.CMWS.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverSolrUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverSolrUrlBase&quot;], getConfigValue(&quot;Server.Solr.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverBOAppUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverBOAppUrlBase&quot;], getConfigValue(&quot;Server.BOApp.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverBOProcRMIUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverBOProcRMIUrlBase&quot;], getConfigValue(&quot;Server.BOProcRMI.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverBOReportsUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverBOReportsUrlBase&quot;], getConfigValue(&quot;Server.BOReports.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverEMReportsUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverEMReportsUrlBase&quot;], getConfigValue(&quot;Server.EMReports.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverBOProcUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverBOProcUrlBase&quot;], getConfigValue(&quot;Server.BOProc.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverCMProcUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverCMProcUrlBase&quot;], getConfigValue(&quot; Server.CMProc.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$serverIMWSUrlBase&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$serverIMWSUrlBase&quot;], getConfigValue(&quot;Server.IMWS.URL.Base&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$installType&quot;]" fromExpression="envMap[&quot;$installType&quot;]"/>
        <core:dataAssignment toExpression="envMap[&quot;$posReportsHost&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$posReportsHost&quot;], getConfigValue(&quot;Server.PosReports.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$posReportsPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$posReportsPort&quot;], getConfigValue(&quot;Server.PosReports.Port&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$posReportsSecurePort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$posReportsSecurePort&quot;], getConfigValue(&quot;Server.PosReports.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$posReportsRmiPort&quot;]" fromExpression="strings:firstNotEmpty(envMap[&quot;$posReportsRmiPort&quot;], getConfigValue(&quot;Server.PosReports.RmiPort&quot;,&quot;&quot;))"/>
    </core:assignAction>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>PopulateParameterMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>804</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>321</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.core.ParameterMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.core.ParameterMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>ParseCompositeUrlParameters</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="parameterMap[&quot;DEVICE_ID&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;DEVICE_ID&quot;], getConfigValue(&quot;Service.DeviceID&quot;, &quot;&quot;), getConfigValue(&quot;Container.DeviceID&quot;, &quot;&quot;), getConfigValue(&quot;JMX.ApplicationID&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;LOCATION_ID&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;LOCATION_ID&quot;], getConfigValue(&quot;Service.LocationID&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BACK_OFFICE_APP_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BACK_OFFICE_APP_HOST&quot;], getConfigValue(&quot;Server.BO.Host&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BACK_OFFICE_APP_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BACK_OFFICE_APP_PORT&quot;], getConfigValue(&quot;Server.BO.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BACK_OFFICE_APP_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BACK_OFFICE_APP_SECURE_PORT&quot;], getConfigValue(&quot;Server.BO.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BACK_OFFICE_SERV_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BACK_OFFICE_SERV_HOST&quot;], getConfigValue(&quot;Server.BO_WS.Host&quot;,&quot;&quot;), getConfigValue(&quot;Server.BO.Host&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BACK_OFFICE_SERV_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BACK_OFFICE_SERV_PORT&quot;], getConfigValue(&quot;Server.BO_WS.HttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.BO.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BACK_OFFICE_SERV_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BACK_OFFICE_SERV_SECURE_PORT&quot;], getConfigValue(&quot;Server.BO_WS.SecureHttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.BO.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_APP_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_APP_HOST&quot;], getConfigValue(&quot;Server.EM.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_SERV_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_SERV_HOST&quot;], getConfigValue(&quot;Server.BO_WS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_SERV_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_SERV_PORT&quot;], getConfigValue(&quot;Server.BO_WS.Port&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_SERV_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_SERV_SECURE_PORT&quot;], getConfigValue(&quot;Server.BO_WS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_ACCOUNT_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_ACCOUNT_HOST&quot;], getConfigValue(&quot;Server.EM.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_ACCOUNT_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_ACCOUNT_PORT&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_ACCOUNT_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_ACCOUNT_SECURE_PORT&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_SEARCH_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_SEARCH_HOST&quot;], getConfigValue(&quot;Server.EM.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_SEARCH_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_SEARCH_PORT&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CUSTOMER_SEARCH_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CUSTOMER_SEARCH_SECURE_PORT&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_APP_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_APP_PORT&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_APP_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_APP_SECURE_PORT&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_PROC_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_PROC_HOST&quot;], getConfigValue(&quot;Server.EM.Host&quot;, &quot;&quot;), getConfigValue(&quot;Broadcast.DefaultDownloadServerHostName&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_PROC_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_PROC_PORT&quot;], getConfigValue(&quot;Server.EM.HttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_PROC_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_PROC_SECURE_PORT&quot;], getConfigValue(&quot;Server.EM.SecureHttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_SERV_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_SERV_HOST&quot;], getConfigValue(&quot;Server.WS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_SERV_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_SERV_PORT&quot;], getConfigValue(&quot;Server.WS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ESTATE_MANAGER_SERV_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ESTATE_MANAGER_SERV_SECURE_PORT&quot;], getConfigValue(&quot;Server.WS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH1_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH1_HOST&quot;], getConfigValue(&quot;Server.EFT1.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH1_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH1_PORT&quot;], getConfigValue(&quot;Server.EFT1.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH1_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH1_SECURE_PORT&quot;], getConfigValue(&quot;Server.EFT1.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH1_PROTOCOL&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH1_PROTOCOL&quot;], getConfigValue(&quot;Server.EFT1.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH2_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH2_HOST&quot;], getConfigValue(&quot;Server.EFT2.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH2_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH2_PORT&quot;], getConfigValue(&quot;Server.EFT2.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH2_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH2_SECURE_PORT&quot;], getConfigValue(&quot;Server.EFT2.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH2_PROTOCOL&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH2_PROTOCOL&quot;], getConfigValue(&quot;Server.EFT2.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH3_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH3_HOST&quot;], getConfigValue(&quot;Server.EFT3.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH3_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH3_PORT&quot;], getConfigValue(&quot;Server.EFT3.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH3_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH3_SECURE_PORT&quot;], getConfigValue(&quot;Server.EFT3.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH3_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH3_SECURE_PORT&quot;], getConfigValue(&quot;Server.EFT3.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH4_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH4_HOST&quot;], getConfigValue(&quot;Server.EFT4.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH4_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH4_PORT&quot;], getConfigValue(&quot;Server.EFT4.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH4_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH4_SECURE_PORT&quot;], getConfigValue(&quot;Server.EFT4.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CARD_AUTH4_PROTOCOL&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CARD_AUTH4_PROTOCOL&quot;], getConfigValue(&quot;Server.EFT4.Protocol&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CRM_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CRM_HOST&quot;], getConfigValue(&quot;Server.CRM_WS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CRM_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CRM_PORT&quot;], getConfigValue(&quot;Server.CRM_WS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;CRM_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;CRM_SECURE_PORT&quot;], getConfigValue(&quot;Server.CRM_WS.SecureHttpPort &quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;INVENTORY_MANAGER_APP_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;INVENTORY_MANAGER_APP_HOST&quot;], getConfigValue(&quot;Server.IM.Host&quot;, &quot;&quot;), getConfigValue(&quot;Server.IMMS.Host&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;INVENTORY_MANAGER_APP_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;INVENTORY_MANAGER_APP_PORT&quot;], getConfigValue(&quot;Server.IM.HttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.IMMS.HttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;INVENTORY_MANAGER_APP_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;INVENTORY_MANAGER_APP_SECURE_PORT&quot;], getConfigValue(&quot;Server.IM.SecureHttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.IMMS.SecureHttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;INVENTORY_MANAGER_SERV_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;INVENTORY_MANAGER_SERV_HOST&quot;], getConfigValue(&quot;Server.IMWS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;INVENTORY_MANAGER_SERV_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;INVENTORY_MANAGER_SERV_PORT&quot;], getConfigValue(&quot;Server.IMWS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;INVENTORY_MANAGER_SERV_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;INVENTORY_MANAGER_SERV_SECURE_PORT&quot;], getConfigValue(&quot;Server.IMWS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ORDER_MANAGER_APP_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ORDER_MANAGER_APP_HOST&quot;], getConfigValue(&quot;Server.OM.Host&quot;,&quot;&quot;),getConfigValue(&quot;Server.OMMS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ORDER_MANAGER_APP_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ORDER_MANAGER_APP_PORT&quot;], getConfigValue(&quot;Server.OM.HttpPort&quot;,&quot;&quot;),getConfigValue(&quot;Server.OMMS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ORDER_MANAGER_APP_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ORDER_MANAGER_APP_SECURE_PORT&quot;], getConfigValue(&quot;Server.OM.SecureHttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.OMMS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ORDER_MANAGER_SERV_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ORDER_MANAGER_SERV_HOST&quot;], getConfigValue(&quot;Server.OMWS.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ORDER_MANAGER_SERV_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ORDER_MANAGER_SERV_PORT&quot;], getConfigValue(&quot;Server.OMWS.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;ORDER_MANAGER_SERV_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;ORDER_MANAGER_SERV_SECURE_PORT&quot;], getConfigValue(&quot;Server.OMWS.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;REPORTS_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;REPORTS_HOST&quot;], getConfigValue(&quot;Server.EMREPORT.Host&quot;, &quot;&quot;), getConfigValue(&quot;Server.Reports.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;REPORTS_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;REPORTS_PORT&quot;], getConfigValue(&quot;Server.EMREPORT.HttpPort&quot;, &quot;&quot;), getConfigValue(&quot;Server.Reports.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;REPORTS_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;REPORTS_SECURE_PORT&quot;], getConfigValue(&quot;Server.Reports.SecureHttpPort&quot;,&quot;&quot;), getConfigValue(&quot;Server.EMREPORT.SecureHttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SETTLEMENT_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SETTLEMENT_HOST&quot;], getConfigValue(&quot;Server.SH.Host&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SETTLEMENT_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SETTLEMENT_PORT&quot;], getConfigValue(&quot;Server.SH.HttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SETTLEMENT_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SETTLEMENT_SECURE_PORT&quot;], getConfigValue(&quot;Server.SH.SecureHttpPort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SOLR_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SOLR_HOST&quot;], getConfigValue(&quot;Common.SolrUrl&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SOLR_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SOLR_PORT&quot;], getConfigValue(&quot;Common.SolrUrl&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;RMI_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;RMI_PORT&quot;], getConfigValue(&quot;RMI.ServerPort&quot;,&quot;&quot;), getConfigValue(&quot;JMX.ManagementNodePort&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DATABASE_IDENTIFIER&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;DATABASE_IDENTIFIER&quot;], getConfigValue(&quot;QueryTranslator.DatabaseIdentifier&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DATABASE_DRIVER&quot;]" fromExpression="parameterMap[&quot;DATABASE_DRIVER&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DATABASE_URL&quot;]" fromExpression="parameterMap[&quot;DATABASE_URL&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DATABASE_USERNAME&quot;]" fromExpression="parameterMap[&quot;DATABASE_USERNAME&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DATABASE_PASSWORD&quot;]" fromExpression="parameterMap[&quot;DATABASE_PASSWORD&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DATABASE_SCHEMA&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;DATABASE_SCHEMA&quot;], getConfigValue(&quot;Common.DatabaseSchema&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DATASOURCE_PARAMETERS&quot;]" fromExpression="parameterMap[&quot;DATASOURCE_PARAMETERS&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;KEYSTORE_PATH&quot;]" fromExpression="parameterMap[&quot;KEYSTORE_PATH&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;KEYSTORE_PASSWORD&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;KEYSTORE_PASSWORD&quot;], getConfigValue(&quot;Keystore.Password&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;AXIS2_USERNAME&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;AXIS2_USERNAME&quot;], getConfigValue(&quot;axis2.user&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;AXIS2_PASSWORD&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;AXIS2_PASSWORD&quot;], getConfigValue(&quot;axis2.password&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;TASK_USERNAME&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;TASK_USERNAME&quot;], getConfigValue(&quot;Task.SystemUser&quot;,&quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;TASK_PASSWORD&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;TASK_PASSWORD&quot;], getConfigValue(&quot;Task.SystemPassword&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SYSTEM_USERNAME&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SYSTEM_USERNAME&quot;], getConfigValue(&quot;System.User&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SYSTEM_PASSWORD&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SYSTEM_PASSWORD&quot;], getConfigValue(&quot;System.Password&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;PARENT_PROCESS_SET&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;PARENT_PROCESS_SET&quot;], getConfigValue(&quot;Common.ParentProcessSet&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;PROCESS_SET&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;PROCESS_SET&quot;], getConfigValue(&quot;Common.ProcessSet&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;PROCESS_CONNECTION_DEFINITION&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;PROCESS_CONNECTION_DEFINITION&quot;], getConfigValue(&quot;ProcessConnections.DefinitionId&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;LOCAL_PORT&quot;]" fromExpression="parameterMap[&quot;LOCAL_PORT&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;LOCAL_SECURE_PORT&quot;]" fromExpression="parameterMap[&quot;LOCAL_SECURE_PORT&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;LOCAL_JVM_MS&quot;]" fromExpression="parameterMap[&quot;LOCAL_JVM_MS&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;LOCAL_JVM_MX&quot;]" fromExpression="parameterMap[&quot;LOCAL_JVM_MX&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;MODULE_CUSTOMER_COLLECTIONS&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;MODULE_CUSTOMER_COLLECTIONS&quot;], getConfigValue(&quot;Modules.CustomerCollectionsModule&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;MODULE_CRM&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;MODULE_CRM&quot;], getConfigValue(&quot;Modules.CRMModule&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;MODULE_INVENTORY&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;MODULE_INVENTORY&quot;], getConfigValue(&quot;Modules.InventoryModule&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;MODULE_ORDER&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;MODULE_ORDER&quot;], getConfigValue(&quot;Modules.OrderModule&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;MODULE_REPAIR&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;MODULE_REPAIR&quot;], getConfigValue(&quot;Modules.RepairModule&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;MODULE_TIME_ATTENDANCE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;MODULE_TIME_ATTENDANCE&quot;], getConfigValue(&quot;Modules.TimeAttendanceModule&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVICE_USERNAME&quot;]" fromExpression="parameterMap[&quot;SERVICE_USERNAME&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVICE_PASSWORD&quot;]" fromExpression="parameterMap[&quot;SERVICE_PASSWORD&quot;]"/>
        <core:dataAssignment toExpression="parameterMap[&quot;RESTAURANT_LOCAL_STATUS_STORE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;RESTAURANT_LOCAL_STATUS_STORE&quot;], getConfigValue(&quot;Restaurant.LocalStatusStore&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;RESTAURANT_SERV_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;RESTAURANT_SERV_HOST&quot;], getConfigValue(&quot;RestaurantServer.WS.Host&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;RESTAURANT_SERV_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;RESTAURANT_SERV_PORT&quot;], getConfigValue(&quot;RestaurantServer.WS.HttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;RESTAURANT_SERV_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;RESTAURANT_SERV_SECURE_PORT&quot;], getConfigValue(&quot;RestaurantServer.WS.SecureHttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;RESTAURANT_SERV_RMI_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;RESTAURANT_SERV_RMI_PORT&quot;], getConfigValue(&quot;RestaurantServer.WS.RMIPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BUMPBAR_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BUMPBAR_HOST&quot;], getConfigValue(&quot;BumpBar.Host&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BUMPBAR_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BUMPBAR_PORT&quot;], getConfigValue(&quot;BumpBar.HttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;BUMPBAR_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;BUMPBAR_SECURE_PORT&quot;], getConfigValue(&quot;BumpBar.SecureHttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SELF_SERVICE_CUSTOMER_USER&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SELF_SERVICE_CUSTOMER_USER&quot;], getConfigValue(&quot;SelfService.CustomerUser&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;APPLICATION_URL&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;APPLICATION_URL&quot;], getConfigValue(&quot;applicationUrl&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;LOCAL_THEME&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;LOCAL_THEME&quot;], getConfigValue(&quot;localTheme&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;PARENT_THEME&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;PARENT_THEME&quot;], getConfigValue(&quot;parentTheme&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;THEME&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;THEME&quot;], getConfigValue(&quot;theme&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_PROCESS_ID&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_PROCESS_ID&quot;], getConfigValue(&quot;serverProcessId&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;DEVICE_TYPE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;DEVICE_TYPE&quot;], getConfigValue(&quot;Service.DeviceType&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_TMS_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_TMS_URL_BASE&quot;], getConfigValue(&quot;Server.TMS.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_BP_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_BP_URL_BASE&quot;], getConfigValue(&quot;Server.BP.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_OMPROC_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_OMPROC_URL_BASE&quot;], getConfigValue(&quot;Server.OMProc.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_IMPROC_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_IMPROC_URL_BASE&quot;], getConfigValue(&quot;Server.IMProc.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_EMPROC_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_EMPROC_URL_BASE&quot;], getConfigValue(&quot;Server.EMProc.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_EMWS_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_EMWS_URL_BASE&quot;], getConfigValue(&quot;Server.EMWS.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_BOWS_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_BOWS_URL_BASE&quot;], getConfigValue(&quot;Server.BOWS.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_CARD_AUTH1_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_CARD_AUTH1_URL_BASE&quot;], getConfigValue(&quot;Server.CardAuth1.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_CARD_AUTH2_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_CARD_AUTH2_URL_BASE&quot;], getConfigValue(&quot;Server.CardAuth2.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_CARD_AUTH3_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_CARD_AUTH3_URL_BASE&quot;], getConfigValue(&quot;Server.CardAuth3.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_CARD_AUTH4_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_CARD_AUTH4_URL_BASE&quot;], getConfigValue(&quot;Server.CardAuth4.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_EMAPP_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_EMAPP_URL_BASE&quot;], getConfigValue(&quot;Server.EMApp.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_HM_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_HM_URL_BASE&quot;], getConfigValue(&quot; Server.HM.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_HMRMI_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_HMRMI_URL_BASE&quot;], getConfigValue(&quot;Server.HMRMI.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_HMCONSUMER_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_HMCONSUMER_URL_BASE&quot;], getConfigValue(&quot;Server.HMConsumer.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_HMKITCHENDISPLAY_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_HMKITCHENDISPLAY_URL_BASE&quot;], getConfigValue(&quot;Server.HMKitchenDisplay.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_CMAPP_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_CMAPP_URL_BASE&quot;], getConfigValue(&quot;Server.CMApp.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_CMWS_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_CMWS_URL_BASE&quot;], getConfigValue(&quot;Server.CMWS.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_SOLR_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_SOLR_URL_BASE&quot;], getConfigValue(&quot;Server.Solr.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_BOAPP_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_BOAPP_URL_BASE&quot;], getConfigValue(&quot;Server.BOApp.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_BOPROCRMI_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_BOPROCRMI_URL_BASE&quot;], getConfigValue(&quot;Server.BOProcRMI.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_BOREPORTS_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_BOREPORTS_URL_BASE&quot;], getConfigValue(&quot;Server.BOReports.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_EMREPORTS_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_EMREPORTS_URL_BASE&quot;], getConfigValue(&quot;Server.EMReports.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_BOPROC_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_BOPROC_URL_BASE&quot;], getConfigValue(&quot;Server.BOProc.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_CMPROC_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_CARD_AUTH1_URL_BASE&quot;], getConfigValue(&quot;Server.CMProc.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SERVER_IMWS_URL_BASE&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;SERVER_IMWS_URL_BASE&quot;], getConfigValue(&quot; Server.IMWS.URL.Base&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;POS_REPORTS_HOST&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;POS_REPORTS_HOST&quot;], getConfigValue(&quot;Server.PosReports.Host&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;POS_REPORTS_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;POS_REPORTS_PORT&quot;], getConfigValue(&quot;Server.PosReports.Port&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;POS_REPORTS_SECURE_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;POS_REPORTS_SECURE_PORT&quot;], getConfigValue(&quot;Server.PosReports.SecureHttpPort&quot;, &quot;&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;POS_REPORTS_RMI_PORT&quot;]" fromExpression="strings:firstNotEmpty(parameterMap[&quot;POS_REPORTS_RMI_PORT&quot;], getConfigValue(&quot;Server.PosReports.RmiPort&quot;, &quot;&quot;))"/>
    </core:assignAction>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>CheckHasAdditionalEnvMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UINullAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>1</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>497</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>909</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.NullAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>2</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>MergeAdditionalEnv</core:toActionID>
            <core:condition>notEmpty(process.additionalEnvMap)</core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>PopulateEnvMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>MergeAdditionalEnv</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.commonUI.list.processes.MergeMapsAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>497</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>1035</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.coreUI.MapA">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.coreUI.MapB">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
                <core:input name="enactor.coreUI.CreateNew">
                    <core:interfaceName>java.lang.Boolean</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output name="enactor.coreUI.Map">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.BasicAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>PopulateEnvMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>ProcessParameterMapItem</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>1313</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>497</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.core.InstallerArguments">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.core.EscapedValue">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.coreUI.MapKey">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.coreUI.MapValue">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.core.InstallerArguments">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:output>
                <core:output required="true" name="enactor.core.EscapedValue">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>LoopParameterMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="escapedValue" fromExpression="strings:findAndReplace(mapValue, &quot;\\&quot;, &quot;/&quot;)"/>
        <core:dataAssignment toExpression="installerArguments" fromExpression="concatenate(installerArguments, ' ', mapKey, '=&quot;', escapedValue, '&quot;')"/>
    </core:assignAction>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>ProcessEnvMapItem</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>1494</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>1083</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.core.EnvData">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.core.EscapedValue">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.coreUI.MapKey">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:input>
                <core:input required="true" name="enactor.coreUI.MapValue">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.core.EnvData">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:output>
                <core:output required="true" name="enactor.core.EscapedValue">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>LoopEnvMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="escapedValue" fromExpression="strings:findAndReplace(mapValue, &quot;\\&quot;, &quot;/&quot;)"/>
        <core:dataAssignment toExpression="envData" fromExpression="concatenate(envData, &quot; &quot;, mapKey, &quot;=\&quot;&quot;, escapedValue, &quot;\&quot;;&quot;)"/>
    </core:assignAction>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>InitialiseEnvData</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>944</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>909</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.core.EnvData">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.core.EnvData">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>LoopEnvMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="envData" fromExpression="'####################################################################################################\\r\\n'"/>
        <core:dataAssignment toExpression="envData" fromExpression="'# ENACTOR CONFIGURATION FILE\\r\\n'"/>
        <core:dataAssignment toExpression="envData" fromExpression="'####################################################################################################\\r\\n'"/>
        <core:dataAssignment toExpression="envData" fromExpression="'# This file is automatically generated by the upgrader and should not be modified\\r\\n'"/>
        <core:dataAssignment toExpression="envData" fromExpression="'####################################################################################################\\r\\n'"/>
    </core:assignAction>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>LoopParameterMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.commonUI.list.processes.MapLoopAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>1036</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>321</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.coreUI.Map">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
                <core:input name="enactor.coreUI.Iterator">
                    <core:interfaceName>java.util.Iterator</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output name="enactor.coreUI.Iterator">
                    <core:interfaceName>java.util.Iterator</core:interfaceName>
                </core:output>
                <core:output name="enactor.coreUI.MapValue">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:output>
                <core:output name="enactor.coreUI.MapKey">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Completed"/>
                <core:outcome name="Next"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.BasicAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>ProcessParameterMapItem</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Next</core:outcome>
        </core:outcomeLink>
        <core:outcomeLink>
            <core:linkID>2</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>ResetIterator</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Completed</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:action>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>LoopEnvMap</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.commonUI.list.processes.MapLoopAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>1214</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>909</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.coreUI.Map">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
                <core:input name="enactor.coreUI.Iterator">
                    <core:interfaceName>java.util.Iterator</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output name="enactor.coreUI.Iterator">
                    <core:interfaceName>java.util.Iterator</core:interfaceName>
                </core:output>
                <core:output name="enactor.coreUI.MapValue">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:output>
                <core:output name="enactor.coreUI.MapKey">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Completed"/>
                <core:outcome name="Next"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.BasicAction</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>ProcessEnvMapItem</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Next</core:outcome>
        </core:outcomeLink>
        <core:outcomeLink>
            <core:linkID>2</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>Success</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Completed</core:outcome>
        </core:outcomeLink>
    </core:action>
    <core:endProcessAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>Failure</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIEndProcessAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>1</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>518</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>131</value>
            </entry>
        </core:uiHints>
        <core:metaData/>
        <core:typeId>enactor.types.EndProcess</core:typeId>
        <core:outcome>Fail</core:outcome>
        <core:defaultProcessId></core:defaultProcessId>
    </core:endProcessAction>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>ResetIterator</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>687</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>700</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.coreUI.Iterator">
                    <core:interfaceName>java.util.Iterator</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.coreUI.Iterator">
                    <core:interfaceName>java.util.Iterator</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>CreateEnvMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="iterator" fromExpression="nullObject()"/>
    </core:assignAction>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>ParseCompositeUrlParameters</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>805</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>490</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.core.ParameterMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.core.ParameterMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>LoopParameterMap</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="parameterMap[&quot;SOLR_HOST&quot;]" fromExpression="strings:substring(strings:replaceString(parameterMap[&quot;SOLR_HOST&quot;], &quot;http://&quot;, &quot;&quot;), 0, strings:lastIndexOf(strings:replaceString(parameterMap[&quot;SOLR_HOST&quot;], &quot;http://&quot;, &quot;&quot;), &quot;:&quot;))"/>
        <core:dataAssignment toExpression="parameterMap[&quot;SOLR_PORT&quot;]" fromExpression="strings:substring(parameterMap[&quot;SOLR_PORT&quot;], strings:lastIndexOf(parameterMap[&quot;SOLR_PORT&quot;], &quot;:&quot;) + 1, strings:lastIndexOf(parameterMap[&quot;SOLR_PORT&quot;], &quot;/&quot;))"/>
    </core:assignAction>
    <core:assignAction>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:actionID>ParseCompositeUrlEnv</core:actionID>
        <core:name></core:name>
        <core:className>com.enactor.coreUI.actions.UIAssignAction</core:className>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>27</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>734</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>1087</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <core:inputs>
                <core:input required="true" name="enactor.core.EnvMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:input>
            </core:inputs>
            <core:outputs>
                <core:output required="true" name="enactor.core.EnvMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </core:output>
            </core:outputs>
            <core:outcomes>
                <core:outcome name="Success"/>
            </core:outcomes>
        </core:metaData>
        <core:typeId>enactor.types.Assign</core:typeId>
        <core:outcomeLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>InitialiseEnvData</core:toActionID>
            <core:condition></core:condition>
            <core:outcome>Success</core:outcome>
        </core:outcomeLink>
        <core:dataAssignment toExpression="envMap[&quot;$solrHost&quot;]" fromExpression="strings:substring(strings:replaceString(envMap[&quot;$solrHost&quot;], &quot;http://&quot;, &quot;&quot;), 0, strings:lastIndexOf(strings:replaceString(envMap[&quot;$solrHost&quot;], &quot;http://&quot;, &quot;&quot;), &quot;:&quot;))"/>
        <core:dataAssignment toExpression="envMap[&quot;$solrPort&quot;]" fromExpression="strings:substring(envMap[&quot;$solrPort&quot;], strings:lastIndexOf(envMap[&quot;$solrPort&quot;], &quot;:&quot;) + 1, strings:lastIndexOf(envMap[&quot;$solrPort&quot;], &quot;/&quot;))"/>
    </core:assignAction>
    <core:eventLink>
        <core:linkID>1</core:linkID>
        <core:toStateID></core:toStateID>
        <core:toActionID>Failure</core:toActionID>
        <core:condition></core:condition>
        <core:event>Exception</core:event>
    </core:eventLink>
    <core:state>
        <core:url></core:url>
        <core:stateID>State</core:stateID>
        <core:name></core:name>
        <core:className></core:className>
        <core:defaultNextStateID></core:defaultNextStateID>
        <core:uiHints>
            <entry>
                <key>com.enactor.tools.editor.process.style</key>
                <value>37</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.xloc</key>
                <value>114</value>
            </entry>
            <entry>
                <key>com.enactor.tools.editor.process.yloc</key>
                <value>321</value>
            </entry>
        </core:uiHints>
        <core:metaData>
            <handledEvents>
                <handledEvent name="StateEntered"/>
            </handledEvents>
            <stateDataTypes>
                <stateDataType required="true" name="enactor.core.ParameterMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </stateDataType>
                <stateDataType required="true" name="enactor.core.EscapedValue">
                    <core:interfaceName>java.lang.String</core:interfaceName>
                </stateDataType>
                <stateDataType required="true" name="enactor.coreUI.Iterator">
                    <core:interfaceName>java.util.Iterator</core:interfaceName>
                </stateDataType>
                <stateDataType required="true" name="enactor.coreUI.MapKey">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </stateDataType>
                <stateDataType required="true" name="enactor.core.EnvMap">
                    <core:interfaceName>java.util.Map</core:interfaceName>
                </stateDataType>
                <stateDataType required="true" name="enactor.coreUI.MapValue">
                    <core:interfaceName>java.lang.Object</core:interfaceName>
                </stateDataType>
            </stateDataTypes>
        </core:metaData>
        <core:typeId>enactor.types.BasicState</core:typeId>
        <core:singleInstance>false</core:singleInstance>
        <core:respondToViewEvents>false</core:respondToViewEvents>
        <core:actionInputMappings>
            <core:actionMapping>
                <core:actionID>CreateParameterMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:targetDataType name="enactor.coreUI.TimeoutMS">
<core:interfaceName>java.lang.Integer</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:targetDataType name="enactor.coreUI.MapType">
<core:interfaceName>java.lang.String</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>MergeAdditionalParameters</core:actionID>
                <core:mappings>
                    <core:processMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.core.AdditionalParameterMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapB">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:processMappings>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType required="true" name="enactor.core.ParameterMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapA">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:targetDataType name="enactor.coreUI.CreateNew">
<core:interfaceName>java.lang.Boolean</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>CreateEnvMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:targetDataType name="enactor.coreUI.MapType">
<core:interfaceName>java.lang.String</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:targetDataType name="enactor.coreUI.TimeoutMS">
<core:interfaceName>java.lang.Integer</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>MergeAdditionalEnv</core:actionID>
                <core:mappings>
                    <core:processMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.core.AdditionalEnvMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapB">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:processMappings>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType required="true" name="enactor.core.EnvMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapA">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:targetDataType name="enactor.coreUI.CreateNew">
<core:interfaceName>java.lang.Boolean</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>LoopParameterMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType required="true" name="enactor.core.ParameterMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.Map">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:sourceDataType required="true" name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>LoopEnvMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType required="true" name="enactor.core.EnvMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.Map">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:sourceDataType required="true" name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
        </core:actionInputMappings>
        <core:actionOutputMappings>
            <core:actionMapping>
                <core:actionID>CreateParameterMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.Map">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.core.ParameterMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>MergeAdditionalParameters</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.Map">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.core.ParameterMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>CreateEnvMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.Map">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.core.EnvMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>MergeAdditionalEnv</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.Map">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.core.EnvMap">
<core:interfaceName>java.util.Map</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>LoopParameterMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.MapKey">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapKey">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.MapValue">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapValue">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
            <core:actionMapping>
                <core:actionID>LoopEnvMap</core:actionID>
                <core:mappings>
                    <core:processMappings/>
                    <core:stateMappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.MapKey">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapKey">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.MapValue">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.MapValue">
<core:interfaceName>java.lang.Object</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                        <core:mappings>
                            <core:sourceDataType name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:sourceDataType>
                            <core:targetDataType required="true" name="enactor.coreUI.Iterator">
<core:interfaceName>java.util.Iterator</core:interfaceName>
                            </core:targetDataType>
                        </core:mappings>
                    </core:stateMappings>
                </core:mappings>
            </core:actionMapping>
        </core:actionOutputMappings>
        <core:eventLink>
            <core:linkID>1</core:linkID>
            <core:toStateID></core:toStateID>
            <core:toActionID>CreateParameterMap</core:toActionID>
            <core:condition></core:condition>
            <core:event>StateEntered</core:event>
        </core:eventLink>
    </core:state>
    <core:stateTransitions/>
</core:process>
